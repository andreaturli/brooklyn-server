/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.brooklyn.rest.domain;

import java.util.Set;

import javax.annotation.Nullable;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.auto.value.AutoValue;

@AutoValue
@JsonDeserialize(builder = AutoValue_NodeMetadataSummary.Builder.class)
public abstract class NodeMetadataSummary {

    /**
     * @return id of the server within the naming scope it was created. potentially generated by the
     *         service.
     */
    @JsonProperty("providerId")
    public abstract String providerId();

    /**
     * @return user defined name of the server.
     */
    @Nullable
    @JsonProperty("name")
    public abstract String name();

    /**
     *
     * A means to uniquely address this resource within a provider. For example, if the namespace of
     * a node or image is region based, the id will likely include both the region and the
     * provider-supplied id encoded to avoid collisions.
     *
     * @return unique id within your account on the provider
     */
    @JsonProperty("id")
    public abstract String id();

    /**
     * @return tags describing this resource, if supported
     */
    @JsonProperty("tags")
    public abstract Set<String> tags();

    /**
     *
     * @return status of the node
     */
    @JsonProperty("status")
    public abstract String status();

    /**
     *
     * @return hostname of the node, or null if unknown
     */
    @Nullable
    @JsonProperty("hostname")
    public abstract String hostname();

    /**
     *
     * The hardware this node is running, if possible to determine.
     */
    @Nullable
    @JsonProperty("hardwareSummary")
    public abstract HardwareSummary hardwareSummary();

    /**
     *
     * The id of the image this node was created from, if possible to correlate.
     */
    @Nullable
    @JsonProperty("imageId")
    public abstract String imageId();

    /**
     *
     * The operating system this node is running, if possible to determine.
     */
    @Nullable
    @JsonProperty("operatingSystemSummary")
    public abstract OperatingSystemSummary operatingSystemSummary();

    /**
     * @return the TCP port used for terminal connections. Generally, this is port 22 for ssh.
     */
    @JsonProperty("loginPort")
    public abstract int loginPort();

    /**
     * If possible, these are returned upon all detail requests. However, it is often the case that
     * credentials are only available when a node is initially created.
     *
     */
    @Nullable
    @JsonProperty("credentialsSummary")
    public abstract LoginCredentialsSummary credentialsSummary();

    /**
     * All public IP addresses, potentially including shared ips.
     */
    @JsonProperty("publicAddresses")
    public abstract Set<String> publicAddresses();

    /**
     * All private IP addresses.
     */
    @JsonProperty("privateAddresses")
    public abstract Set<String> privateAddresses();

    public static NodeMetadataSummary create(
            String providerId,
            String name,
            String id,
            Set<String> tags,
            String status,
            String hostname,
            HardwareSummary hardware,
            String imageId,
            OperatingSystemSummary operatingSystemSummary,
            int loginPort,
            LoginCredentialsSummary credentialsSummary,
            Set<String> publicAddresses,
            Set<String> privateAddresses) {
        return builder().providerId(providerId).name(name).id(id).tags(tags).status(status).hostname(hostname).hardwareSummary(hardware).imageId(imageId).operatingSystemSummary(operatingSystemSummary).loginPort(loginPort).credentialsSummary(credentialsSummary).publicAddresses(publicAddresses).privateAddresses(privateAddresses).build();
    }

    public abstract Builder toBuilder();

    @AutoValue.Builder
    public abstract static class Builder {
        @JsonProperty("providerId")
        public abstract Builder providerId(String providerId);
        @Nullable
        @JsonProperty("name")
        public abstract Builder name(String name);
        @JsonProperty("id")
        public abstract Builder id(String id);
        @JsonProperty("tags")
        public abstract Builder tags(Set<String> tags);
        @JsonProperty("status")
        public abstract Builder status(String status);
        @Nullable
        @JsonProperty("hostname")
        public abstract Builder hostname(String hostname);
        @Nullable
        @JsonProperty("hardwareSummary")
        public abstract Builder hardwareSummary(HardwareSummary hardwareSummary);
        @Nullable
        @JsonProperty("imageId")
        public abstract Builder imageId(String imageId);
        @Nullable
        @JsonProperty("operatingSystemSummary")
        public abstract Builder operatingSystemSummary(OperatingSystemSummary operatingSystemSummary);
        @JsonProperty("loginPort")
        public abstract Builder loginPort(int loginPort);
        @Nullable
        @JsonProperty("credentialsSummary")
        public abstract Builder credentialsSummary(LoginCredentialsSummary credentials);
        @JsonProperty("publicAddresses")
        public abstract Builder publicAddresses(Set<String> publicAddresses);
        @JsonProperty("privateAddresses")
        public abstract Builder privateAddresses(Set<String> privateAddresses);

        public abstract NodeMetadataSummary build();
    }

    public static Builder builder() {
        return new AutoValue_NodeMetadataSummary.Builder();
    }

}
